class Solution {
    public void dfs(TreeNode root , TreeNode parent , HashMap<TreeNode , TreeNode> map) {
        if(root == null)
           return;
        map.put(root , parent);
        dfs(root.left , root , map);
        dfs(root.right , root , map);        
    }

    public List<Integer> distanceK(TreeNode root, TreeNode target, int k) {
        HashMap<TreeNode , TreeNode> map = new HashMap<>();
        dfs(root , null ,map);

        Map<TreeNode , Boolean> visited = new HashMap<>();
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(target);
        visited.put(target , true);
        int level = 0;
        while(!q.isEmpty()) {
            int size = q.size();
            if(level == k)
              break;
            for(int i = 0; i < size; i++) {
                TreeNode node = q.poll();
                if(node.left != null && !visited.getOrDefault(node.left , false)) {
                    q.offer(node.left);
                    visited.put(node.left , true);
                }
                if(node.right != null && !visited.getOrDefault(node.right , false)) {
                    q.offer(node.right);
                    visited.put(node.right , true);
                }
                if(map.get(node) != null && !visited.getOrDefault(map.get(node) , false)) {
                    q.offer(map.get(node));
                    visited.put(map.get(node) , true);
                }
            }    
            level++;       
        }
        List<Integer> ans = new ArrayList<>();
        while(!q.isEmpty()) {
            ans.add(q.poll().val);
        }
        return ans;
    }
}
