/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode recur(int startPost , int endPost , int startIn , int endIn , Map<Integer , Integer> map , int[] postorder , int[] inorder) {
        if(startIn > endIn)
           return null;
        TreeNode root = new TreeNode(postorder[endPost]);
        int pos = map.get(root.val);
        int len = endIn - map.get(root.val);
        root.left = recur(startPost , endPost - len - 1 , startIn ,  pos - 1 , map , postorder , inorder);
        root.right = recur(startPost - len , endPost - 1 , pos + 1 , endIn , map , postorder , inorder);
        return root;
    }
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        int post = postorder.length - 1;
        int in  = postorder.length - 1;
        Map<Integer , Integer> map = new HashMap<>();
        for(int i = 0; i < inorder.length; i++) {
             map.put(inorder[i] , i);
        }
        return recur(0 , post , 0 , in , map , postorder , inorder);
    }
}
