 class Pair {
    TreeNode node;
    int index;
    Pair(TreeNode node , int index) {
        this.node  = node;
        this.index = index;
    }
 }
class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        Queue<Pair> q = new LinkedList<>();
        q.offer(new Pair(root , 0));
        int maxWidth = Integer.MIN_VALUE;
        while(!q.isEmpty()) {
            int left = 0;
            int right = 0;
            int size = q.size();
            int minus = q.peek().index;
            for(int i = 0; i < size; i++) {
                Pair p = q.poll();
                TreeNode node = p.node;
                int index     = p.index - minus;
                if(i == 0)
                   left = index;
                if(i == size - 1)
                   right = index;
                if(node.left != null) 
                   q.offer(new Pair(node.left , 2 * index + 1));
                if(node.right != null)
                   q.offer(new Pair(node.right , 2 * index + 2));
            }
            maxWidth = Math.max(maxWidth , right - left + 1);
        }
        return maxWidth;
    }
}
